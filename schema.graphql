# This file is automatically generated by Keystone, do not modify it manually.
# Modify your Keystone config when you want to change this.

type User {
  id: ID!
  name: String
  email: String
  password: PasswordState
  posts(
    where: PostWhereInput! = {}
    orderBy: [PostOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Post!]
  postsCount(where: PostWhereInput! = {}): Int
}

type PasswordState {
  isSet: Boolean!
}

input UserWhereUniqueInput {
  id: ID
  email: String
}

input UserWhereInput {
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
  id: IDFilter
  name: StringFilter
  email: StringFilter
  posts: PostManyRelationFilter
}

input IDFilter {
  equals: ID
  in: [ID!]
  notIn: [ID!]
  lt: ID
  lte: ID
  gt: ID
  gte: ID
  not: IDFilter
}

input StringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringFilter
}

input NestedStringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringFilter
}

input PostManyRelationFilter {
  every: PostWhereInput
  some: PostWhereInput
  none: PostWhereInput
}

input UserOrderByInput {
  id: OrderDirection
  name: OrderDirection
  email: OrderDirection
}

enum OrderDirection {
  asc
  desc
}

input UserUpdateInput {
  name: String
  email: String
  password: String
  posts: PostRelateToManyForUpdateInput
}

input PostRelateToManyForUpdateInput {
  disconnect: [PostWhereUniqueInput!]
  set: [PostWhereUniqueInput!]
  create: [PostCreateInput!]
  connect: [PostWhereUniqueInput!]
}

input UserUpdateArgs {
  where: UserWhereUniqueInput!
  data: UserUpdateInput!
}

input UserCreateInput {
  name: String
  email: String
  password: String
  posts: PostRelateToManyForCreateInput
}

input PostRelateToManyForCreateInput {
  create: [PostCreateInput!]
  connect: [PostWhereUniqueInput!]
}

type Post {
  id: ID!
  title: String
  status: String
  content: Post_content_Document
  publishDate: DateTime
  author: User
  tags(
    where: TagWhereInput! = {}
    orderBy: [TagOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Tag!]
  tagsCount(where: TagWhereInput! = {}): Int
}

type Post_content_Document {
  document(hydrateRelationships: Boolean! = false): JSON!
}

scalar DateTime
  @specifiedBy(url: "https://datatracker.ietf.org/doc/html/rfc3339#section-5.6")

input PostWhereUniqueInput {
  id: ID
}

input PostWhereInput {
  AND: [PostWhereInput!]
  OR: [PostWhereInput!]
  NOT: [PostWhereInput!]
  id: IDFilter
  title: StringFilter
  status: StringNullableFilter
  publishDate: DateTimeNullableFilter
  author: UserWhereInput
  tags: TagManyRelationFilter
}

input StringNullableFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringNullableFilter
}

input NestedStringNullableFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringNullableFilter
}

input DateTimeNullableFilter {
  equals: DateTime
  in: [DateTime!]
  notIn: [DateTime!]
  lt: DateTime
  lte: DateTime
  gt: DateTime
  gte: DateTime
  not: DateTimeNullableFilter
}

input TagManyRelationFilter {
  every: TagWhereInput
  some: TagWhereInput
  none: TagWhereInput
}

input PostOrderByInput {
  id: OrderDirection
  title: OrderDirection
  status: OrderDirection
  publishDate: OrderDirection
}

input PostUpdateInput {
  title: String
  status: String
  content: JSON
  publishDate: DateTime
  author: UserRelateToOneForUpdateInput
  tags: TagRelateToManyForUpdateInput
}

input UserRelateToOneForUpdateInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
  disconnect: Boolean
}

input TagRelateToManyForUpdateInput {
  disconnect: [TagWhereUniqueInput!]
  set: [TagWhereUniqueInput!]
  create: [TagCreateInput!]
  connect: [TagWhereUniqueInput!]
}

input PostUpdateArgs {
  where: PostWhereUniqueInput!
  data: PostUpdateInput!
}

input PostCreateInput {
  title: String
  status: String
  content: JSON
  publishDate: DateTime
  author: UserRelateToOneForCreateInput
  tags: TagRelateToManyForCreateInput
}

input UserRelateToOneForCreateInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
}

input TagRelateToManyForCreateInput {
  create: [TagCreateInput!]
  connect: [TagWhereUniqueInput!]
}

type Tag {
  id: ID!
  name: String
  posts(
    where: PostWhereInput! = {}
    orderBy: [PostOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Post!]
  postsCount(where: PostWhereInput! = {}): Int
}

input TagWhereUniqueInput {
  id: ID
}

input TagWhereInput {
  AND: [TagWhereInput!]
  OR: [TagWhereInput!]
  NOT: [TagWhereInput!]
  id: IDFilter
  name: StringFilter
  posts: PostManyRelationFilter
}

input TagOrderByInput {
  id: OrderDirection
  name: OrderDirection
}

input TagUpdateInput {
  name: String
  posts: PostRelateToManyForUpdateInput
}

input TagUpdateArgs {
  where: TagWhereUniqueInput!
  data: TagUpdateInput!
}

input TagCreateInput {
  name: String
  posts: PostRelateToManyForCreateInput
}

type Card {
  id: ID!
  name: String
  image: ImageFieldOutput
  color: Color
  effects: Effect
}

interface ImageFieldOutput {
  id: ID!
  filesize: Int!
  width: Int!
  height: Int!
  extension: ImageExtension!
  ref: String!
  url: String!
}

enum ImageExtension {
  jpg
  png
  webp
  gif
}

input CardWhereUniqueInput {
  id: ID
}

input CardWhereInput {
  AND: [CardWhereInput!]
  OR: [CardWhereInput!]
  NOT: [CardWhereInput!]
  id: IDFilter
  name: StringFilter
  color: ColorWhereInput
  effects: EffectWhereInput
}

input CardOrderByInput {
  id: OrderDirection
  name: OrderDirection
}

input CardUpdateInput {
  name: String
  image: ImageFieldInput
  color: ColorRelateToOneForUpdateInput
  effects: EffectRelateToOneForUpdateInput
}

input ImageFieldInput {
  upload: Upload
  ref: String
}

"""
The `Upload` scalar type represents a file upload.
"""
scalar Upload

input ColorRelateToOneForUpdateInput {
  create: ColorCreateInput
  connect: ColorWhereUniqueInput
  disconnect: Boolean
}

input EffectRelateToOneForUpdateInput {
  create: EffectCreateInput
  connect: EffectWhereUniqueInput
  disconnect: Boolean
}

input CardUpdateArgs {
  where: CardWhereUniqueInput!
  data: CardUpdateInput!
}

input CardCreateInput {
  name: String
  image: ImageFieldInput
  color: ColorRelateToOneForCreateInput
  effects: EffectRelateToOneForCreateInput
}

input ColorRelateToOneForCreateInput {
  create: ColorCreateInput
  connect: ColorWhereUniqueInput
}

input EffectRelateToOneForCreateInput {
  create: EffectCreateInput
  connect: EffectWhereUniqueInput
}

type Color {
  id: ID!
  name: String
  code: String
  description: Color_description_Document
  cards(
    where: CardWhereInput! = {}
    orderBy: [CardOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Card!]
  cardsCount(where: CardWhereInput! = {}): Int
}

type Color_description_Document {
  document(hydrateRelationships: Boolean! = false): JSON!
}

input ColorWhereUniqueInput {
  id: ID
}

input ColorWhereInput {
  AND: [ColorWhereInput!]
  OR: [ColorWhereInput!]
  NOT: [ColorWhereInput!]
  id: IDFilter
  name: StringFilter
  code: StringFilter
  cards: CardManyRelationFilter
}

input CardManyRelationFilter {
  every: CardWhereInput
  some: CardWhereInput
  none: CardWhereInput
}

input ColorOrderByInput {
  id: OrderDirection
  name: OrderDirection
  code: OrderDirection
}

input ColorUpdateInput {
  name: String
  code: String
  description: JSON
  cards: CardRelateToManyForUpdateInput
}

input CardRelateToManyForUpdateInput {
  disconnect: [CardWhereUniqueInput!]
  set: [CardWhereUniqueInput!]
  create: [CardCreateInput!]
  connect: [CardWhereUniqueInput!]
}

input ColorUpdateArgs {
  where: ColorWhereUniqueInput!
  data: ColorUpdateInput!
}

input ColorCreateInput {
  name: String
  code: String
  description: JSON
  cards: CardRelateToManyForCreateInput
}

input CardRelateToManyForCreateInput {
  create: [CardCreateInput!]
  connect: [CardWhereUniqueInput!]
}

type Effect {
  id: ID!
  ProductionEffect(
    where: ProductionEffectWhereInput! = {}
    orderBy: [ProductionEffectOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [ProductionEffect!]
  ProductionEffectCount(where: ProductionEffectWhereInput! = {}): Int
  Card: Card
}

input EffectWhereUniqueInput {
  id: ID
}

input EffectWhereInput {
  AND: [EffectWhereInput!]
  OR: [EffectWhereInput!]
  NOT: [EffectWhereInput!]
  id: IDFilter
  ProductionEffect: ProductionEffectManyRelationFilter
  Card: CardWhereInput
}

input ProductionEffectManyRelationFilter {
  every: ProductionEffectWhereInput
  some: ProductionEffectWhereInput
  none: ProductionEffectWhereInput
}

input EffectOrderByInput {
  id: OrderDirection
}

input EffectUpdateInput {
  ProductionEffect: ProductionEffectRelateToManyForUpdateInput
  Card: CardRelateToOneForUpdateInput
}

input ProductionEffectRelateToManyForUpdateInput {
  disconnect: [ProductionEffectWhereUniqueInput!]
  set: [ProductionEffectWhereUniqueInput!]
  create: [ProductionEffectCreateInput!]
  connect: [ProductionEffectWhereUniqueInput!]
}

input CardRelateToOneForUpdateInput {
  create: CardCreateInput
  connect: CardWhereUniqueInput
  disconnect: Boolean
}

input EffectUpdateArgs {
  where: EffectWhereUniqueInput!
  data: EffectUpdateInput!
}

input EffectCreateInput {
  ProductionEffect: ProductionEffectRelateToManyForCreateInput
  Card: CardRelateToOneForCreateInput
}

input ProductionEffectRelateToManyForCreateInput {
  create: [ProductionEffectCreateInput!]
  connect: [ProductionEffectWhereUniqueInput!]
}

input CardRelateToOneForCreateInput {
  create: CardCreateInput
  connect: CardWhereUniqueInput
}

type Unit {
  id: ID!
  name: String
  description: Unit_description_Document
  image: ImageFieldOutput
  ProductionEffect(
    where: ProductionEffectWhereInput! = {}
    orderBy: [ProductionEffectOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [ProductionEffect!]
  ProductionEffectCount(where: ProductionEffectWhereInput! = {}): Int
}

type Unit_description_Document {
  document(hydrateRelationships: Boolean! = false): JSON!
}

input UnitWhereUniqueInput {
  id: ID
}

type LocalImageFieldOutput implements ImageFieldOutput {
  id: ID!
  filesize: Int!
  width: Int!
  height: Int!
  extension: ImageExtension!
  ref: String!
  url: String!
}

type CloudImageFieldOutput implements ImageFieldOutput {
  id: ID!
  filesize: Int!
  width: Int!
  height: Int!
  extension: ImageExtension!
  ref: String!
  url: String!
}

input UnitWhereInput {
  AND: [UnitWhereInput!]
  OR: [UnitWhereInput!]
  NOT: [UnitWhereInput!]
  id: IDFilter
  name: StringFilter
  ProductionEffect: ProductionEffectManyRelationFilter
}

input UnitOrderByInput {
  id: OrderDirection
  name: OrderDirection
}

input UnitUpdateInput {
  name: String
  description: JSON
  image: ImageFieldInput
  ProductionEffect: ProductionEffectRelateToManyForUpdateInput
}

input UnitUpdateArgs {
  where: UnitWhereUniqueInput!
  data: UnitUpdateInput!
}

input UnitCreateInput {
  name: String
  description: JSON
  image: ImageFieldInput
  ProductionEffect: ProductionEffectRelateToManyForCreateInput
}

type ProductionEffect {
  id: ID!
  abstractEffect: Effect
  unit: Unit
  quantity: Int
  label: String
}

input ProductionEffectWhereUniqueInput {
  id: ID
}

input ProductionEffectWhereInput {
  AND: [ProductionEffectWhereInput!]
  OR: [ProductionEffectWhereInput!]
  NOT: [ProductionEffectWhereInput!]
  id: IDFilter
  abstractEffect: EffectWhereInput
  unit: UnitWhereInput
  quantity: IntNullableFilter
}

input IntNullableFilter {
  equals: Int
  in: [Int!]
  notIn: [Int!]
  lt: Int
  lte: Int
  gt: Int
  gte: Int
  not: IntNullableFilter
}

input ProductionEffectOrderByInput {
  id: OrderDirection
  quantity: OrderDirection
}

input ProductionEffectUpdateInput {
  abstractEffect: EffectRelateToOneForUpdateInput
  unit: UnitRelateToOneForUpdateInput
  quantity: Int
}

input UnitRelateToOneForUpdateInput {
  create: UnitCreateInput
  connect: UnitWhereUniqueInput
  disconnect: Boolean
}

input ProductionEffectUpdateArgs {
  where: ProductionEffectWhereUniqueInput!
  data: ProductionEffectUpdateInput!
}

input ProductionEffectCreateInput {
  abstractEffect: EffectRelateToOneForCreateInput
  unit: UnitRelateToOneForCreateInput
  quantity: Int
}

input UnitRelateToOneForCreateInput {
  create: UnitCreateInput
  connect: UnitWhereUniqueInput
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON
  @specifiedBy(
    url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf"
  )

type Mutation {
  createUser(data: UserCreateInput!): User
  createUsers(data: [UserCreateInput!]!): [User]
  updateUser(where: UserWhereUniqueInput!, data: UserUpdateInput!): User
  updateUsers(data: [UserUpdateArgs!]!): [User]
  deleteUser(where: UserWhereUniqueInput!): User
  deleteUsers(where: [UserWhereUniqueInput!]!): [User]
  createPost(data: PostCreateInput!): Post
  createPosts(data: [PostCreateInput!]!): [Post]
  updatePost(where: PostWhereUniqueInput!, data: PostUpdateInput!): Post
  updatePosts(data: [PostUpdateArgs!]!): [Post]
  deletePost(where: PostWhereUniqueInput!): Post
  deletePosts(where: [PostWhereUniqueInput!]!): [Post]
  createTag(data: TagCreateInput!): Tag
  createTags(data: [TagCreateInput!]!): [Tag]
  updateTag(where: TagWhereUniqueInput!, data: TagUpdateInput!): Tag
  updateTags(data: [TagUpdateArgs!]!): [Tag]
  deleteTag(where: TagWhereUniqueInput!): Tag
  deleteTags(where: [TagWhereUniqueInput!]!): [Tag]
  createCard(data: CardCreateInput!): Card
  createCards(data: [CardCreateInput!]!): [Card]
  updateCard(where: CardWhereUniqueInput!, data: CardUpdateInput!): Card
  updateCards(data: [CardUpdateArgs!]!): [Card]
  deleteCard(where: CardWhereUniqueInput!): Card
  deleteCards(where: [CardWhereUniqueInput!]!): [Card]
  createColor(data: ColorCreateInput!): Color
  createColors(data: [ColorCreateInput!]!): [Color]
  updateColor(where: ColorWhereUniqueInput!, data: ColorUpdateInput!): Color
  updateColors(data: [ColorUpdateArgs!]!): [Color]
  deleteColor(where: ColorWhereUniqueInput!): Color
  deleteColors(where: [ColorWhereUniqueInput!]!): [Color]
  createEffect(data: EffectCreateInput!): Effect
  createEffects(data: [EffectCreateInput!]!): [Effect]
  updateEffect(where: EffectWhereUniqueInput!, data: EffectUpdateInput!): Effect
  updateEffects(data: [EffectUpdateArgs!]!): [Effect]
  deleteEffect(where: EffectWhereUniqueInput!): Effect
  deleteEffects(where: [EffectWhereUniqueInput!]!): [Effect]
  createUnit(data: UnitCreateInput!): Unit
  createUnits(data: [UnitCreateInput!]!): [Unit]
  updateUnit(where: UnitWhereUniqueInput!, data: UnitUpdateInput!): Unit
  updateUnits(data: [UnitUpdateArgs!]!): [Unit]
  deleteUnit(where: UnitWhereUniqueInput!): Unit
  deleteUnits(where: [UnitWhereUniqueInput!]!): [Unit]
  createProductionEffect(data: ProductionEffectCreateInput!): ProductionEffect
  createProductionEffects(
    data: [ProductionEffectCreateInput!]!
  ): [ProductionEffect]
  updateProductionEffect(
    where: ProductionEffectWhereUniqueInput!
    data: ProductionEffectUpdateInput!
  ): ProductionEffect
  updateProductionEffects(
    data: [ProductionEffectUpdateArgs!]!
  ): [ProductionEffect]
  deleteProductionEffect(
    where: ProductionEffectWhereUniqueInput!
  ): ProductionEffect
  deleteProductionEffects(
    where: [ProductionEffectWhereUniqueInput!]!
  ): [ProductionEffect]
  endSession: Boolean!
  authenticateUserWithPassword(
    email: String!
    password: String!
  ): UserAuthenticationWithPasswordResult
  createInitialUser(
    data: CreateInitialUserInput!
  ): UserAuthenticationWithPasswordSuccess!
}

union UserAuthenticationWithPasswordResult =
    UserAuthenticationWithPasswordSuccess
  | UserAuthenticationWithPasswordFailure

type UserAuthenticationWithPasswordSuccess {
  sessionToken: String!
  item: User!
}

type UserAuthenticationWithPasswordFailure {
  message: String!
}

input CreateInitialUserInput {
  name: String
  email: String
  password: String
}

type Query {
  users(
    where: UserWhereInput! = {}
    orderBy: [UserOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [User!]
  user(where: UserWhereUniqueInput!): User
  usersCount(where: UserWhereInput! = {}): Int
  posts(
    where: PostWhereInput! = {}
    orderBy: [PostOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Post!]
  post(where: PostWhereUniqueInput!): Post
  postsCount(where: PostWhereInput! = {}): Int
  tags(
    where: TagWhereInput! = {}
    orderBy: [TagOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Tag!]
  tag(where: TagWhereUniqueInput!): Tag
  tagsCount(where: TagWhereInput! = {}): Int
  cards(
    where: CardWhereInput! = {}
    orderBy: [CardOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Card!]
  card(where: CardWhereUniqueInput!): Card
  cardsCount(where: CardWhereInput! = {}): Int
  colors(
    where: ColorWhereInput! = {}
    orderBy: [ColorOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Color!]
  color(where: ColorWhereUniqueInput!): Color
  colorsCount(where: ColorWhereInput! = {}): Int
  effects(
    where: EffectWhereInput! = {}
    orderBy: [EffectOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Effect!]
  effect(where: EffectWhereUniqueInput!): Effect
  effectsCount(where: EffectWhereInput! = {}): Int
  units(
    where: UnitWhereInput! = {}
    orderBy: [UnitOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Unit!]
  unit(where: UnitWhereUniqueInput!): Unit
  unitsCount(where: UnitWhereInput! = {}): Int
  productionEffects(
    where: ProductionEffectWhereInput! = {}
    orderBy: [ProductionEffectOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [ProductionEffect!]
  productionEffect(where: ProductionEffectWhereUniqueInput!): ProductionEffect
  productionEffectsCount(where: ProductionEffectWhereInput! = {}): Int
  keystone: KeystoneMeta!
  authenticatedItem: AuthenticatedItem
}

union AuthenticatedItem = User

type KeystoneMeta {
  adminMeta: KeystoneAdminMeta!
}

type KeystoneAdminMeta {
  enableSignout: Boolean!
  enableSessionItem: Boolean!
  lists: [KeystoneAdminUIListMeta!]!
  list(key: String!): KeystoneAdminUIListMeta
}

type KeystoneAdminUIListMeta {
  key: String!
  itemQueryName: String!
  listQueryName: String!
  hideCreate: Boolean!
  hideDelete: Boolean!
  path: String!
  label: String!
  singular: String!
  plural: String!
  description: String
  initialColumns: [String!]!
  pageSize: Int!
  labelField: String!
  fields: [KeystoneAdminUIFieldMeta!]!
  initialSort: KeystoneAdminUISort
  isHidden: Boolean!
}

type KeystoneAdminUIFieldMeta {
  path: String!
  label: String!
  isOrderable: Boolean!
  isFilterable: Boolean!
  fieldMeta: JSON
  viewsIndex: Int!
  customViewsIndex: Int
  createView: KeystoneAdminUIFieldMetaCreateView!
  listView: KeystoneAdminUIFieldMetaListView!
  itemView(id: ID): KeystoneAdminUIFieldMetaItemView
  search: QueryMode
}

type KeystoneAdminUIFieldMetaCreateView {
  fieldMode: KeystoneAdminUIFieldMetaCreateViewFieldMode!
}

enum KeystoneAdminUIFieldMetaCreateViewFieldMode {
  edit
  hidden
}

type KeystoneAdminUIFieldMetaListView {
  fieldMode: KeystoneAdminUIFieldMetaListViewFieldMode!
}

enum KeystoneAdminUIFieldMetaListViewFieldMode {
  read
  hidden
}

type KeystoneAdminUIFieldMetaItemView {
  fieldMode: KeystoneAdminUIFieldMetaItemViewFieldMode
}

enum KeystoneAdminUIFieldMetaItemViewFieldMode {
  edit
  read
  hidden
}

enum QueryMode {
  default
  insensitive
}

type KeystoneAdminUISort {
  field: String!
  direction: KeystoneAdminUISortDirection!
}

enum KeystoneAdminUISortDirection {
  ASC
  DESC
}
